---
title: "Assignment #1"
author: "Your Name"
date: today
format: 
  pdf:
    toc: true
    toc-title: "Contents"
    toc-depth: 1
    number-sections: true
    colorlinks: true
    fontsize: 12pt
    link-citations: true
    linkcolor: "purple"
    urlcolor: "purple"
    code-block-bg: "#fff2f9"
    code-block-border-left: "purple"
    tbl-colwidths: [50,50]
    fig-pos: "H"
    fig-align: "center"
    tbl-align: "center"
    highlight-style: atom-one
    indent: false
    # code-overflow: wrap
    # linestretch: 2
    keep-tex: true
    include-in-header: 
       text: |
         \usepackage{fvextra}
         \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
         \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}
execute:
  warning: false
  message: false
  fig-width: 4
  fig-height: 5
editor: visual
bibliography: references.bib
---

\newpage

# Housekeeping

I typically create a *Housekeeping* section where I install packages, create functions, and load data.

## Packages

```{r}
## Load packages
library(broom)
library(conflicted)
library(kableExtra)
library(knitr)
library(tidyverse)

## Prefer over all other packages
conflict_prefer("filter", "dplyr")
```

## Functions

```{r}
## Create function that doubles the input digit
double_it <- function(number){
  double = number * 2
  return(double)
}
```

## Data

```{r}
## Load data
df <- read_csv("data/favorability_polls.csv")
```

# Exploratory data analysis

Notice that you can create headers in Quarto documents. Quarto will use these headers to print the table of contents.

Another cool thing about Quarto is that you can manage your bibliography and references; for instance:

*According to @wickham2023r, we conduct exploratory data analysis, among other things, to generate new questions about the data or refine the questions we already have.*

To do so, you just need to copy the BibTeX reference from Google Scholar and paste it into the *references.bib* file located in the working directory. Check the citation syntax, [here](https://quarto.org/docs/authoring/citations.html).

Quarto allows you to include code and print code output:

```{r}
#| fig-width: 11
## Plot
df |>
  count(politician) |>
  arrange(desc(n)) |>
  filter(n > 20) |>
  mutate(
    politician = gsub(".* ", "", politician),
    politician = factor(politician, levels = politician)
  ) |>
  ggplot(aes(x = politician, y = n))  +
  geom_bar(stat = "identity", fill = "gold") +
  theme_light() + 
  theme(axis.text.x = element_text(angle = -45, hjust = 0)) +
  labs(
    title = "Favorability polls: A count of the polls in which each politician has been included",
    subtitle = "Politicians with more than 20 polls",
    x = "",
    y = "",
    caption = "Data source: Latest Polls - FiveThirtyEight"
  )
```

You can set the figures' width and depth as general patterns in the YAML metadata. Likewise, you can set specific parameters by typing, for example, `#| fig-width: 11` at the first line of the chunk in question.

Moreover, you can insert {{< latex >}} math:

$$
\bar{y} = \frac{1}{n}\sum_{i=1}^n y_i
$$

You can also insert inline {{< latex >}} math: $\bar{y} = \frac{1}{n}\sum_{i=1}^n y_i$

::: callout-important
## Install extension

If the iconic {{< latex >}} string is not rendering in your computer, you must run the following command in the RStudio Terminal:\

*quarto add quarto-ext/fancy-text*
:::

Remember, you can download this model Quarto document from [GitHub](https://github.com/ealvaradomena/class_repo). Please read my blog post about it.

As you will see, the model Quarto document has very extensive YAML metadata. Feel free to change parameters and customize the PDF file the way you find prettier.

By the way, here is some code to print neat regression tables using the `kableExtra` and `broom` packages:

```{r}
## Fit the model
model <- lm(mpg ~ cyl + hp, data = mtcars)

## Print regression table
kableExtra::kable(
  x = broom::tidy(model), 
  caption = "Regression output",
  col.names = c("Term", "Estimate", "SE", "t-statistic", "p-value"),
  digits = c(0, 2, 2, 2, 4),
  format = "pipe"
)
```

Hit the *Render* button to turn the Quarto document into a PDF file. The new file will be created in the working directory.

# References
